/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graphtutorial;


import com.microsoft.graph.models.Message;
import com.microsoft.graph.models.User;
import com.microsoft.graph.requests.MessageCollectionPage;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.*;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println("Java Graph Tutorial");
        System.out.println();

        final Properties oAuthProperties = new Properties();
        try {
            oAuthProperties.load(App.class.getResourceAsStream("oAuth.properties"));
        } catch (IOException e) {
            System.out.println("Unable to read OAuth configuration. Make sure you have a properly formatted oAuth.properties file. See README for details.");
            return;
        }

        System.out.println("who is reporting error??????");

        initializeGraph(oAuthProperties);



        greetUser();

        Scanner input = new Scanner(System.in);

        int choice = -1;

        while (choice != 0) {
            System.out.println("Please choose one of the following options:");
            System.out.println("0. Exit");
            System.out.println("1. Display access token");
            System.out.println("2. List my inbox");
            System.out.println("3. Get mail");
            System.out.println("4. Make a Graph call");
            System.out.println("5. View all messages");
            System.out.println("6. Save all inbox messages as MIME files");

            try {
                choice = input.nextInt();
            } catch (InputMismatchException ex) {
                // Skip over non-integer input
            }

            input.nextLine();

            // Process user choice
            switch(choice) {
                case 0:
                    // Exit the program
                    System.out.println("Goodbye...");
                    break;
                case 1:
                    // Display access token
                    displayAccessToken();
                    break;
                case 2:
                    // List emails from user's inbox
                    listInbox();
                    break;
                case 3:
                    // Get  message
                    getMail();
                    break;
                case 4:
                    // Run any Graph code
                    makeGraphCall();
                    break;
                case 5:
                    viewAllMessages();
                    break;
                case 6:
                    saveAllMessagesAsMIME();
                    break;
                default:
                    System.out.println("Invalid choice");
            }
        }

        input.close();
    }


    private static void initializeGraph(Properties properties) {
        try {
            Graph.initializeGraphForUserAuth(properties,
                    challenge -> System.out.println(challenge.getMessage()));
        } catch (Exception e)
        {
            System.out.println("Error initializing Graph for user auth");
            System.out.println(e.getMessage());
        }
    }


    private static void greetUser() {
        try {
            final User user = Graph.getUser();
            // For Work/school accounts, email is in mail property
            // Personal accounts, email is in userPrincipalName
            final String email = user.mail == null ? user.userPrincipalName : user.mail;
            System.out.println("Hello, " + user.displayName + "!");
            System.out.println("Email: " + email);
        } catch (Exception e) {
            System.out.println("Error getting user");
            System.out.println(e.getMessage());
        }
    }


    private static void displayAccessToken() {
        try {
            final String accessToken = Graph.getUserToken();
            System.out.println("Access token: " + accessToken);
        } catch (Exception e) {
            System.out.println("Error getting access token");
            System.out.println(e.getMessage());
        }
    }


    private static void listInbox() {
        try {
            final MessageCollectionPage messages = Graph.getInbox();
            // Output each message's details
            for (Message message: messages.getCurrentPage()) {
                System.out.println("Message: " + message.subject);
                System.out.println("  From: " + message.from.emailAddress.name);
                System.out.println("  Status: " + (message.isRead ? "Read" : "Unread"));
                System.out.println("  Received: " + message.receivedDateTime
                        .atZoneSameInstant(ZoneId.systemDefault()).toLocalDateTime()
                        .format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT)));
            }
            final Boolean moreMessagesAvailable = messages.getNextPage() != null;
            System.out.println("\nMore messages available? " + moreMessagesAvailable);
        } catch (Exception e) {
            System.out.println("Error getting inbox");
            System.out.println(e.getMessage());
        }
    }

    private static void getMail() {
        try {
            final MessageCollectionPage messages = Graph.getInbox();
            final String uri = "https://graph.microsoft.com/v1.0/me/messages/73a8c84b-cb1d-4807-b870-f121d830f1cc/$value";

            HttpClient client = HttpClient.newHttpClient();
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(uri))
                    .GET()
                    .build();
            HttpResponse<Path> response =
                    client.send(request, HttpResponse.BodyHandlers.ofFile(Paths.get("body.txt")));


            System.out.println("request uri is : " + request.uri());
            System.out.println("request from" + request.method());
            System.out.println("response is" + response.headers());


            final Boolean moreMessagesAvailable = messages.getNextPage() != null;
            System.out.println("\nMore messages available? " + moreMessagesAvailable);
        } catch (Exception e) {
            System.out.println("Error getting inbox");
            System.out.println(e.getMessage());
        }
    }

    private static void viewAllMessages() {
        try {
            List<Message> messages = Graph.getAllMessages();

            for (Message message : messages) {
                System.out.println("Subject: " + message.subject);
                System.out.println("Body: " + message.body.content);
            }
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private static void saveAllMessagesAsMIME() {
        try {
            Graph.saveInboxMessagesAsMIME();
            System.out.println("All messages have been saved as MIME files.");
        } catch (Exception e) {
            System.out.println("Error saving messages as MIME files");
            System.out.println(e.getMessage());
        }
    }

    private static void makeGraphCall() {
        // TODO
    }

}
